

<div class="container">
    <span data-lang="es" class="text first-text">Hey,</span>
    <span data-lang="en" class="text first-text">Hey,</span>

    <span data-lang="es" class="text sec-text">Hola mundo!</span>
    <span data-lang="en" class="text sec-text">Hello World!</span>
</div>

<style>
.container{
    display: inline-block;
}
.container .text{
    position: relative;
    color: rgb(253 224 71 / 0.8);
    font-weight: 700;
}
.container .text.first-text{
    color: #FFF;
}
.text.sec-text:before{
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-color: #000;
    border-left: 2px solid rgb(253 224 71 / 0.8);
    animation: animate 2.5s steps(10) infinite alternate,
    cursor .4s step-end infinite alternate; 
}
@keyframes animate{
    40%, 60%{
        left: calc(100% + 2px);
        border-color: transparent;
    }
    100%{
        left: 0%;
        border-color: transparent;
    }
}
@keyframes cursor{
    50%{border-color: transparent;}
}
</style>

<script>
// @ts-nocheck
(() => {
    const root = document.documentElement;
            /** @type {{ [key: string]: string[] }} */
            const cycles = {
            es: ["Soy Gerald", "Desarrollador", "El indicado"],
            en: ["I'm Gerald", "Developer", "The one"]
        };

        let idx = 0;
            /** @type {ReturnType<typeof setInterval> | null} */
            let intervalId = null;

        function updateOnce() {
                const lang = /** @type {string} */ (root.dataset.lang || 'es');
                const el = /** @type {HTMLElement | null} */ (document.querySelector(`.sec-text[data-lang="${lang}"]`));
                if (!el) return;
                const items = cycles[lang] || cycles.es;
                el.textContent = items[idx % items.length];
        }

    function startLoop() {
        stopLoop();
        // show initial immediately
        idx = 0;
        updateOnce();
        intervalId = setInterval(() => {
            idx = (idx + 1) % 3;
            updateOnce();
        }, 4000);
    }

        function stopLoop() {
                if (intervalId !== null) {
                    clearInterval(/** @type {ReturnType<typeof setInterval>} */ (intervalId));
                    intervalId = null;
                }
        }

    // Start initially
    startLoop();

    // If language changes, restart loop so the right span is targeted
    const obs = new MutationObserver((mutations) => {
        for (const m of mutations) {
            if (m.attributeName === 'data-lang') {
                startLoop();
                break;
            }
        }
    });
    obs.observe(root, { attributes: true, attributeFilter: ['data-lang'] });
})();
</script>